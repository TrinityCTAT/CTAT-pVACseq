#License Agreements
#pVACtools is licensed under [NPOSL-3.0](http://opensource.org/licenses/NPOSL-3.0).

#By using the IEDB software, you are consenting to be bound by and become a "Licensee" for the use of IEDB tools and are consenting to the terms and conditions of the Non-Profit Open Software License ("Non-Profit OSL") version 3.0

#Please read these two license agreements [here](http://tools.iedb.org/mhci/download/) before proceeding. If you do not agree to all of the terms of these two agreements, you must not install or use the product. Companies (for-profit entities) interested in downloading the command-line versions of the IEDB tools or running the entire analysis resource locally, should contact us (license@iedb.org) for details on licensing options.

#Citing the IEDB
#All publications or presentations of data generated by use of the IEDB Resource Analysis tools should include citations to the relevant reference(s), found [here](http://tools.iedb.org/mhci/reference/).


FROM griffithlab/pvactools:latest

##~~~~~~~~~~~
### Samtools
##~~~~~~~~~~~
WORKDIR /opt
ENV SAMTOOLS_VERSION=1.12
RUN SAMTOOLS_URL="https://github.com/samtools/samtools/releases/download/${SAMTOOLS_VERSION}/samtools-${SAMTOOLS_VERSION}.tar.bz2" && \
    cd /usr/local/src && \
    wget $SAMTOOLS_URL && \
    tar xf samtools-${SAMTOOLS_VERSION}.tar.bz2 && \
    cd samtools-${SAMTOOLS_VERSION}/htslib-${SAMTOOLS_VERSION} && ./configure && make && make install && \
    cd ../ && ./configure --without-curses && make && make install && \
    rm /usr/local/src/samtools-${SAMTOOLS_VERSION}.tar.bz2 && rm -r /usr/local/src/samtools-${SAMTOOLS_VERSION}

##~~~~~~~~~~~
### htslib
##~~~~~~~~~~~
#RUN https://github.com/samtools/htslib.git && \
#    cd htslib && \
#    autoreconf -i && \
#    ./configure && \
#    make && \
#    make install 

########################################
# VEP
########################################
RUN apt-get update && apt-get install -y \
    tcsh \
    gcc \
    build-essential \
    zlib1g-dev \
    gawk \
    perl \
    perl-base \
    bioperl

RUN curl -L http://cpanmin.us | perl - App::cpanminus
RUN cpanm Module::Build
RUN cpanm install \
    Set::IntervalTree \
    JSON \
    Text::CSV \
    DBI \
    Archive::Zip \
    Bio::Root::Version \
    PerlIO::gzip \
    IO::Uncompress::Gunzip


#~~~~~~~~~~~~~~
# VEP
#~~~~~~~~~~~~~~
WORKDIR /opt
#ARG CACHEBUST=1
#RUN wget https://github.com/Ensembl/ensembl-vep/archive/refs/tags/release/105.0.tar.gz && \
#    tar -xvf 105.0.tar.gz && \
#    cd ensembl-vep-release-105.0 && \

RUN git clone https://github.com/Ensembl/ensembl-vep.git && \
    cd ensembl-vep && \
    git checkout release/105 && \
    perl INSTALL.pl --NO_UPDATE --NO_TEST

#~~~~~~~~~~~~~~
# VEP Plugins
#~~~~~~~~~~~~~~
WORKDIR /opt
RUN git clone https://github.com/Ensembl/VEP_plugins.git && \
    pvacseq install_vep_plugin /opt/VEP_plugins



RUN apt-get update && apt-get install -y \
    cmake

#~~~~~~~~~~~~~
# VT 
#~~~~~~~~~~~~~
WORKDIR /opt
RUN git clone https://github.com/atks/vt.git && \
    cd vt && \
    git submodule update --init --recursive  && \
    make

#~~~~~~~~~~~~~
# Bam-Readcount
#~~~~~~~~~~~~~
WORKDIR /opt
RUN git clone https://github.com/genome/bam-readcount && \
    cd bam-readcount && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make && \
    cp -r * /usr/bin

COPY bam_readcount_helper.py /usr/bin/bam_readcount_helper.py

RUN pip install cyvcf2

#~~~~~~~~~~~~~~~
# VA Tools
#~~~~~~~~~~~~~~~
RUN pip install vatools
RUN pip install --upgrade numpy

RUN pip3 install tensorflow


#~~~~~~~~~~~~~~~~~
# Subread
#~~~~~~~~~~~~~~~~~
# Doanload and install subread
WORKDIR /usr/local/src
RUN wget https://sourceforge.net/projects/subread/files/subread-2.0.3/subread-2.0.3-Linux-x86_64.tar.gz && \
    tar -xvf subread-2.0.3-Linux-x86_64.tar.gz && \
    rm -r subread-2.0.3-Linux-x86_64.tar.gz


#~~~~~~~~~~~~~~~~~
# Kallisto
#~~~~~~~~~~~~~~~~~
#WORKDIR /usr/local/src
## Run WGET and install Kallisto
#RUN wget https://github.com/pachterlab/kallisto/releases/download/v0.46.1/kallisto_linux-v0.46.1.tar.gz && \
#    tar -zxvf kallisto_linux-v0.46.1.tar.gz && \
#    rm -rf kallisto_linux-v0.46.1.tar.gz
#ENV PATH /usr/local/src/kallisto:$PATH





##~~~~~~~~~~~
### BCFTools
##~~~~~~~~~~~
RUN wget https://github.com/samtools/bcftools/releases/download/1.15.1/bcftools-1.15.1.tar.bz2 && \
    tar -xvf bcftools-1.15.1.tar.bz2 && \
    cd bcftools-1.15.1 && \
    make && \
    make install && \
    rm -rf bcftools-1.15.1.tar.bz2





#~~~~~~~~~~~~~~~~~
# Subread
#~~~~~~~~~~~~~~~~~
WORKDIR /usr/local/src


ENV R_BASE_VERSION 4.3.0
RUN apt-get install -y \
        software-properties-common \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 95C0FAF38DB3CCAD0C080A7BDC78B2DDEABC47B7 \
    && add-apt-repository "deb http://cloud.r-project.org/bin/linux/debian buster-cran40/" \
    && apt update && apt-get clean
#    && add-apt-repository "deb http://deb.debian.org/debian bullseye main" \
#    && add-apt-repository "deb http://cloud.r-project.org/bin/linux/debian bullseye-cran40/" \
#    && apt update && apt-get clean
# RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then \
#         echo "Running command for amd64"; \
#         # Run the command for amd64 architecture
#     elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
#         echo "Running command for arm64"; \
#         # Run the command for arm64 architecture
#     else \
#         echo "Unsupported platform"; \
#         exit 1; \
#     fi
#RUN cat /etc/apt/sources.list
#RUN cat /etc/apt/sources.list
# RUN apt-get install libicu67
#RUN apt-get install -y --install-recommends libc6 libicu67 libreadline8 r-cran-cluster r-cran-kernsmooth r-cran-mgcv r-cran-nlme r-cran-rpart r-cran-survival r-cran-matrix r-base-core r-recommended r-base
RUN apt-get install -y r-base

## Add the subread R script 
# ARG CACHEBUST=1
ADD runFeatureCounts.R /usr/local/src 
RUN chmod 744 /usr/local/src/runFeatureCounts.R

# Doanload and install subread
RUN R -e 'install.packages(c("BiocManager","futile.logger","optparse"))' && \
    R -e 'BiocManager::install(c("Rsubread", ask = F))'


#~~~~~~~~~~~
## Picard tools
#~~~~~~~~~~~
WORKDIR /usr/local/src
RUN wget https://github.com/broadinstitute/picard/releases/download/2.25.2/picard.jar
ENV PICARD_HOME $SRC/picard.jar


#~~~~~~~~~~~~~~~~~~~~~
# Expression annotation script 
#~~~~~~~~~~~~~~~~~~~~~

WORKDIR /usr/local/src
#ARG CACHEBUST=1
#COPY SplitVCFaddExpressionMultiprocess.py /usr/local/src/SplitVCFaddExpressionMultiprocess.py
COPY annotate_VEP.py /usr/local/src/annotate_VEP.py

WORKDIR /usr/local/src
COPY annotate_expression.py /usr/local/src/annotate_expression.py

WORKDIR /usr/local/src
COPY annotation_VEP_expression.py /usr/local/src/annotation_VEP_expression.py


CMD ["/bin/bash"]



#~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Add R script 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~
ARG CACHEBUST=1
COPY Filter.R /usr/local/src/Filter.R
